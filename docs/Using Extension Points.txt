Using Extension Points
======================

Whether or not we like to admit it, most (if not all) of the applications we
write need to change over time. We fix bugs, and we add, modify and remove
features. In other words, we spend our time either fixing, or extending our
applications.

Sometimes we extend our applications by changing the actual code, sometimes
we have other ad hoc extension mechanisms in place - a text file here
a directory of scripts there. As applications grow they often end up with
numerous places where they can be extended, but with a different extension
mechanism at each one. This makes it hard for developers who want to extend
the application to know a) *where* they can add extensions, and b) *how*
to add them.

Envisage attempts to address this problem by admitting up front that our
applications need to be extensible, and by providing a standard way for
developers to advertise the places where extension can occur (known as
*extension points*), and for other developers to make contributions to them.

In Envisage, *extension points* and the contributions made to them (known as
*extensions*) are stored in the *extension registry*. Envisage is designed such
that you can implement your own extension registry, but by default, it uses an
implementation based on the entry points mechanism of `Python Eggs`_.

All of the code shippets in this document are based on the `Python Eggs`_
extension mechanism, and are taken from the `Message of the Day`_ example:-

1) Declaring an Extension Point
-------------------------------

Extension points are declared in the *setup.py* file of a plugin eggs, using
the ``[enthought.envisage.extension_points]`` entry point. The following is
is a snippet from the `acme.motd`_ plugin:-

::

    setup(
        ...

        entry_points = """

        ...

        [enthought.envisage.extension_points]
        acme.motd.messages = acme.motd.api:IMessage

        ...
    
        """
    )

This tells us two things:-

1) That this plugin offers an extension point called "acme.motd.messages"
2) That each contribution to the extension point must implement the
   IMessage_ interface.

2) Making contributions to an Extension Point
---------------------------------------------

In this case, we will contribute some pithy quotes about software development,
and to make our contributions there are just two things that we have to do:-

a) Create some messages!

   In this example, we put the messages in a module messages.py_.

b) Add an entry point to our plugin egg that contains a reference to each
   message.

The following is a snippet from the `acme.motd.software_quotes`_ plugin:-

::

    setup(
        entry_points = """

        [acme.motd.messages]
        meyer       = acme.motd.software_quotes.messages:meyer
        dijkstra    = acme.motd.software_quotes.messages:dijkstra
        fuller      = acme.motd.software_quotes.messages:fuller
        gilb        = acme.motd.software_quotes.messages:gilb
        norman      = acme.motd.software_quotes.messages:norman
        einstein    = acme.motd.software_quotes.messages:einstein
        fowler      = acme.motd.software_quotes.messages:fowler
        hendrickson = acme.motd.software_quotes.messages:hendrickson
        jeffries    = acme.motd.software_quotes.messages:jeffries
        tuft        = acme.motd.software_quotes.messages:tuft

        """
    )

3) Retrieving the contributions to an Extension Point
-----------------------------------------------------

Ok, so far so good. One plugin (*acme.motd*) has advertised the fact that
it has an extension point called "acme.motd.messages", and that the
contributions to the extension point must implement the IMessage_ interface.
Another plugin (*acme.motd.software_quotes*) has come along and kindly
offered to contribute some messages about software development.

Now, we need to know how to retrieve the contributed messages at runtime. In
this example, the messages are retrievd by the *acme.motd* plugin found in
the motd_plugin.py_ module..

::

    class MOTDPlugin(Plugin):
        """ The MOTD Plugin. """

	# The contributed messages.
        messages = ExtensionPoint(List(IMessage), id='acme.motd.messages')

	...

        def start(self, application):
            """ Start the plugin. """

            # Use the contributed messages to populate a MOTD object.
            motd = MOTD(messages=self.messages)
	
            ...

This code declares a *messages* extension point trait, and all that the plugin
has to do to access the contributed messages is so say ``self.messages``.

This example shows a common pattern in Envisage plugin development, in that
they are often written such that the contributions to extension points are
used by plugisn to create and initialize services (in this case, an
instance of the MOTD_ class).

.. _IApplication: ../../enthought/envisage/i_application.py
.. _MOTD: ../../examples/src/acme.motd/acme/motd/motd.py
.. _IMessage: ../../examples/src/acme.motd/acme/motd/i_message.py
.. _`Message of the Day`: ../../examples/apps/MOTD
.. _acme.motd: ../../examples/src/acme.motd/setup.py
.. _acme.motd.software_quotes: ../../examples/src/acme.motd.software_quotes/setup.py
.. _motd_plugin.py: ../../examples/src/acme.motd/acme/motd/motd_plugin.py
.. _messages.py: ../../examples/src/acme.motd.software_quotes/acme/motd/software_quotes/messages.py
.. _`Python Eggs`: http://peak.telecommunity.com/DevCenter/PythonEggs
