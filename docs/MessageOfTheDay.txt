The "Message of the Day" (MOTD) Example
=======================================

Only marginally more complicated than the traditional "Hello World" example,
this is a simple application that prints a (hopefully witty, educational, or
inspiring) "Message of the Day". Obviously, if we actually had to write this
application, we might not choose to use a framework like Envisage (it is one of
the rare applications that is so simple that why would you bother), but it does
serve to illustrate all of the fundamental aspects of building an Envisage
application.

All of the code for this example can be found in the `examples/MOTD`_ directory
of the Envisage distribution. This directory contains two subdirectories::

dist
  Contains the actual runnable application as it might actually be
  distributed/deployed.

  To run the application::

  ``cd dist``
  ``python run.py``
  
  (or equivalent, depending on your operating system and shell)
  
src
  Contains the source code for the eggs that make up the application. This
  directory is there to allow easy access to the example code, but would
  obviously not normally need to be deployed.

Before we dive right in to building our extensible application, let's take a
small, but important, step back. Envisage is designed to be an integration
platform -- a place where you can bring existing code and with a (hopefully)
minimal amount of effort, make it work with the rest of the application.
Because of this, we will start the MOTD example by designing the application
without any knowledge of Envisage whatsoever. This is obviously a good idea in
general, as it allows our code to be reused outside of Envisage applications.

Plain Ol' MOTD
--------------

So lets take a look at our non-Envisage aware MOTD application, the code for
which is in the acme.motd_ package. A good place to start as a developer
*using* any package in Envisage (and, for that matter, the entire Enthought
tool-suite) is to look at any interfaces and classes exposed via its 'api.py'
module.

In this case, there are 2 interfaces

1) IMOTD_

  The interface for simple "Message of the Day" functionality

2) IMessage_

  The interface supported by each message returned by the motd() method on
  the IMOTD_ interface.

We also (not coincidentally!) have 2 corresponding implementation classes::

1) MOTD_
2) Message_

As you can see, the MOTD_ class simply contains a list of messages and
when its motd() method is called, it simply returns a random choice from the
list.

An example of using our MOTD_ class at the Python prompt might be::

    >>> from acme.motd.api import Message, MOTD
    >>> motd = MOTD(messages=[Message(author='Anon', text='Hello World!')])
    >>> message = motd.motd()
    >>> print '"%s" - %s' % (message.text, message.author)
    "Hello World!" - Anon
    >>> 

Well, we had to get "Hello World" in there somewhere!

The important point here is that this code is written without any knowledge of
Envisage or extensibility whatsoever. It is just a small, reusable piece of
code (albeit a very simple one).

Not So Plain Ol' MOTD
---------------------

Now lets take this code and look at the steps we have to go through in
order to turn it into an extensible, pluggable Envisage application.

1) Create the main Application class
--------------------------------------

First of all, we need to create an object that represents the application
itself. In Envisage, this can be any object that implements the IApplication_
interface, but is usually either the default Application_ class, or one
derived from it.

In the MOTD_ example, we create the class in the run.py_ module as follows::

    def main():
        """ The function that starts your application. """

        # Create and run the application.
        from enthought.envisage.api import ConsoleApplication

        return ConsoleApplication(id='acme.motd').run()

Note that the run.py_ file also contains some boilerplate code to add the
application's `Python Eggs`_ to the ``sys.path``, but this is not specific
to Envisage - that code would be required for any egg-based application.

2) Create the 'acme.motd' plugin
--------------------------------

This is the plugin that will deliver the "Message of the Day" functionality
into the application. It will do this by declaring an extension point to
allow other plugins to contribute messages, and by using contributions to
create an instance of the MOTD_ class and to publish it as a service.

Remember that plugins are conceptually split into two halves -- definition
and implementation.

The plugin definition is part of the egg 'setup.py' module, and so for the
'acme.motd' plugin, we declare the "acme.motd.messages" extension point and
the associated plugin implementation::

    setup(
        ...

        entry_points = """

        ...

	[enthought.envisage.plugins]
	motd = acme.motd.motd_plugin:MOTDPlugin

        [enthought.envisage.extension_points]
        acme.motd.messages = acme.motd.api:IMessage

        ...
    
        """
    )

As shown above, the corresponding plugin implementation is in the MOTDPlugin_
class::

    class MOTDPlugin(Plugin):
        """ The MOTD Plugin. """

	# The contributed messages.
        messages = ExtensionPoint(List(IMessage), id='acme.motd.messages')

	...

        def start(self, application):
            """ Start the plugin. """

            # Use the contributed messages to create a MOTD object.
            motd = MOTD(messages=self.messages)
	
            # Publish the object as a service.
	    application.register_service(IMOTD, motd)

            # And this is how we could look the service up!
            motd_service = application.get_service(IMOTD)
  
            # Get the message of the day...
            message = motd_service.motd()

            # ... and print it.
            print '\n"%s"\n\n- %s' % (message.text, message.author)
        
            return

Although it is obviously a bit of overkill, the example shows how we would
take a MOTD_ object and register it a service for other parts of the
application to use. Sadly, in this example, there are no other parts of the
application, so we just lookup and use the service ourselves!

3) Build the 'acme.motd' egg.
-----------------------------

To deploy the plugin into an application, we have to build it as an egg::

    cd .../examples/MOTD/src/acme.motd
    python setup.py bdist_egg --dist-dir ../../dist/eggs

If we run the application now , we will be told to work hard and be good to our
Mothers. Good advice indeed, but what it really shows is that we haven't yet
contributed any messages to the application. Lets do this next.

4) Create the 'acme.motd.software_quotes' plugin
------------------------------------------------

First of all, we have to create the messages that we want to add. Remember that
when the acme.motd_ plugin advertised the extension point, it told us that
every contribution had to implement the IMessage_ interface. Happily, there is
a class that does just that already defined for us (Message_) and so we create
a simple module ('messages.py'_) and add our Message_ instances to it::

   ...

    fowler = Message(
        author = "Martin Fowler",
        text   = "Any fool can write code that a computer can understand. Good"
        " programmers write code that humans can understand."
    )

    hendrickson = Message(
        author = "Chet Hendrickson",
        text   = "The rule is, 'Do the simplest thing that could possibly"
        " work', not the most stupid."
    )

    ...

Now we go to the 'setup.py' file for the acme.motd.software_quotes_ egg
and tell Envisage about the messages that we have just created::

    setup(
        entry_points = """

        [acme.motd.messages]
	...
        fowler      = acme.motd.software_quotes.messages:fowler
        hendrickson = acme.motd.software_quotes.messages:hendrickson
	...

        """
    )

3) Build the 'acme.motd.software_quotes' egg.
---------------------------------------------

To deploy the plugin into an application, we have to build it as an egg::

    cd .../examples/MOTD/src/acme.motd.software_quotes
    python setup.py bdist_egg --dist-dir ../../dist/eggs

If we run the application now , we will (if all is well!) get a random, pithy
quote about software development!

To add more messages to the application in future, all we have to do is to
create other eggs similar to the 'acme.motd.software_quotes' egg and drop 
them into the '.../examples/MOTD/dist/eggs' directory.

We have successfully built our first extensible, pluggable application!

.. _acme.motd: ../../examples/MOTD/src/acme.motd/acme/motd/api.py
.. _acme.motd.software_quotes: ../../examples/MOTD/src/acme.motd.software_quotes/setup.py
.. _Application: ../../enthought/envisage/i_application.py
.._`examples/MOTD`: ../../examples/MOTD
.. _IApplication: ../../enthought/envisage/i_application.py
.. _IMessage: ../../examples/MOTD/src/acme.motd/acme/motd/i_message.py
.. _Message: ../../examples/MOTD/src/acme.motd/acme/motd/message.py
.. _MOTD: ../../examples/MOTD/src/acme.motd/acme/motd/motd.py
.. _IMOTD: ../../examples/MOTD/src/acme.motd/acme/motd/i_motd.py
.. _MOTDPlugin: ../../examples/MOTD/acme.motd/acme/motd/motd_plugin.py
.. _`Python Eggs`: http://peak.telecommunity.com/DevCenter/PythonEggs
.. _run.py: ../../examples/MOTD/dist/run.py
